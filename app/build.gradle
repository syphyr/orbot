plugins {
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.serialization)
}
apply from: "../commons.gradle"

// Gets the version name from the latest Git tag, stripping the leading v off
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

static def versionCodeEpoch() {
    return (new Date().getTime() / 1000).toInteger()
}

android {
    namespace = "org.torproject.android"
    compileSdk = 35

    defaultConfig {
        applicationId "org.torproject.android"
        versionName getVersionName()
        minSdk = 24
        targetSdk = 35
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "Orbot"
    }

    buildFeatures {
        buildConfig true
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false
        }
        debug {
            debuggable true
            applicationIdSuffix ".debug"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "arm64-v8a"
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    flavorDimensions = ["free"]

    productFlavors {
        fullperm {
            dimension "free"
            applicationId "org.torproject.android"
            versionCode 1750300102
            versionName getVersionName()
            archivesBaseName = "Orbot-${versionName}"
        }

        nightly {
            dimension "free"
            applicationId "org.torproject.android.nightly"
            versionName getVersionName()
            versionCode versionCodeEpoch()
            archivesBaseName = "Orbot-${versionName}"
        }
    }

    splits {
        abi {
            universalApk false
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/androidx.localbroadcastmanager_localbroadcastmanager.version']
        }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'InvalidPackage'
        htmlReport true
        lintConfig file('../lint.xml')
        textReport false
        xmlReport false
    }
}

dependencies {
    // Use locally built ipt_proxy+go_tun2socks
    implementation(project(":OrbotLib"))
    implementation(project(":appcore"))
    implementation(project(":orbotservice"))

    implementation(libs.android.material)
    implementation(libs.android.volley)
    implementation(libs.androidx.activity)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.localbroadcast)
    implementation(libs.androidx.navigation.fragment.ktx)
    implementation(libs.androidx.navigation.ui.ktx)
    implementation(libs.retrofit.converter)
    implementation(libs.retrofit.lib)
    implementation(libs.rootbeer.lib)
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.appiconnamechanger)
    implementation(libs.androidx.preference)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.biometric)
    implementation(libs.androidx.lifecycle.common)
    implementation(libs.androidx.lifecycle.process)

    testImplementation(libs.junit.jupiter)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso)
    androidTestImplementation(libs.androidx.rules)
    androidTestImplementation(libs.androidx.runner)
}

tasks.register("copyLicenseToAssets", Copy) {
    from("../LICENSE")
    into("$projectDir/src/main/assets")
}

preBuild.dependsOn copyLicenseToAssets
